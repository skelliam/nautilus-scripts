#!/usr/bin/python

import pygtk
pygtk.require('2.0')
import gtk
import sys, os, logging, re, subprocess
from time import time

#Simple alert script from:
#http://www.ibm.com/developerworks/linux/library/l-script-linux-desktop-2/index.html
def alert(msg):
    """Show a dialog with a simple message."""
    dialog = gtk.MessageDialog()
    dialog.set_markup(msg)
    dialog.run()

#cool logging class from
#http://www.electricmonk.nl/log/2011/08/14/redirect-stdout-and-stderr-to-a-logger-in-python/
class StreamToLogger(object):
   """
   Fake file-like stream object that redirects writes to a logger instance.
   """
   def __init__(self, logger, log_level=logging.INFO):
      self.logger = logger
      self.log_level = log_level
      self.linebuf = ''
 
   def write(self, buf):
      for line in buf.rstrip().splitlines():
         self.logger.log(self.log_level, line.rstrip())

def loggerSetup():
   logging.basicConfig(
      level=logging.DEBUG,
      format='%(asctime)s:%(levelname)s:%(name)s:%(message)s',
      filename="out.log",
      filemode='a'
   )

   stdout_logger = logging.getLogger('STDOUT')
   sl = StreamToLogger(stdout_logger, logging.INFO)
   sys.stdout = sl
    
   stderr_logger = logging.getLogger('STDERR')
   sl = StreamToLogger(stderr_logger, logging.ERROR)
   sys.stderr = sl

def main():
   loggerSetup()

   pdf_files=""
   now = int( time() )
   files = os.getenv('NAUTILUS_SCRIPT_SELECTED_FILE_PATHS')
   myfiles = files.split()
   
   for file in myfiles:
      base = os.path.basename(file)
      path, ext = os.path.splitext(file)
      dirname = os.path.dirname(file)

      if (ext == '.pdf'):
         pdf_files += (base + " ")

   if (len(pdf_files.split()) > 1):
      os.system("pdftk %s cat output %s" %( pdf_files, 'cat'+str(now)+'.pdf' ))
      alert('Concatenated %d pdf files.' %( len(myfiles) ))


if __name__ == "__main__":
    main()
