#!/usr/bin/python

import sys, os, logging, re, subprocess

#cool logging class from
#http://www.electricmonk.nl/log/2011/08/14/redirect-stdout-and-stderr-to-a-logger-in-python/

class StreamToLogger(object):
   """
   Fake file-like stream object that redirects writes to a logger instance.
   """
   def __init__(self, logger, log_level=logging.INFO):
      self.logger = logger
      self.log_level = log_level
      self.linebuf = ''
 
   def write(self, buf):
      for line in buf.rstrip().splitlines():
         self.logger.log(self.log_level, line.rstrip())

logging.basicConfig(
   level=logging.DEBUG,
   format='%(asctime)s:%(levelname)s:%(name)s:%(message)s',
   filename="out.log",
   filemode='a'
)

stdout_logger = logging.getLogger('STDOUT')
sl = StreamToLogger(stdout_logger, logging.INFO)
sys.stdout = sl
 
stderr_logger = logging.getLogger('STDERR')
sl = StreamToLogger(stderr_logger, logging.ERROR)
sys.stderr = sl

# -------------------- END OF LOGGING STUFF -----------------------

mydir = os.getenv('NAUTILUS_SCRIPT_CURRENT_URI')
files = os.getenv('NAUTILUS_SCRIPT_SELECTED_FILE_PATHS')
myfiles = files.split()
filevers = {}

for file in myfiles:
   basename = os.path.basename(file)
   dirname = os.path.dirname(file)
   m = re.match('scan(?P<time>\d+)-(?P<num>\d+)\.pdf', basename) 
   time = int(m.group('time'))
   num = int(m.group('num'))
   filevers[time] = filevers.setdefault(time, 0) + 1

groups = filevers.keys()
groups.sort()

# --------------------- ERROR CHECKING ---------------------------
if (len(groups) == 2):
   if (filevers[groups[0]] != filevers[groups[1]]):
      print "different sized groups"
      sys.exit()
else:
   print "not enough or too many scanned groups selected"
   sys.exit()

# --------------------- MATCH THEM UP ---------------------------

num = filevers[groups[0]]
oddpages = 1
evenpages = num

for i in range(num):
   firstfile = dirname+"/scan%d-%d.pdf" %(groups[0], oddpages)
   secondfile = dirname+"/scan%d-%d.pdf" %(groups[1], evenpages)
   finalfile = dirname+"/dplx-scan%d-%02d-%02d.pdf" %(groups[0], oddpages, evenpages)
   print firstfile, secondfile, finalfile
   os.system("pdftk %s %s cat output %s" %(firstfile, secondfile, finalfile))
   oddpages += 1
   evenpages -= 1
