#!/usr/bin/python

import pygtk
pygtk.require('2.0')
import gtk
import sys, os, logging, re, subprocess
from time import time


#cool logging class from
#http://www.electricmonk.nl/log/2011/08/14/redirect-stdout-and-stderr-to-a-logger-in-python/
class StreamToLogger(object):
   """
   Fake file-like stream object that redirects writes to a logger instance.
   """
   def __init__(self, logger, log_level=logging.INFO):
      self.logger = logger
      self.log_level = log_level
      self.linebuf = ''
 
   def write(self, buf):
      for line in buf.rstrip().splitlines():
         self.logger.log(self.log_level, line.rstrip())


class EntryDialog(gtk.MessageDialog):
    def __init__(self, *args, **kwargs):
        '''
        Creates a new EntryDialog. Takes all the arguments of the usual
        MessageDialog constructor plus one optional named argument 
        "default_value" to specify the initial contents of the entry.
        '''
        if 'default_value' in kwargs:
            default_value = kwargs['default_value']
            del kwargs['default_value']
        else:
            default_value = ''
        super(EntryDialog, self).__init__(*args, **kwargs)
        entry = gtk.Entry()        
        entry.set_text(str(default_value))
        entry.connect("activate", 
                      lambda ent, dlg, resp: dlg.response(resp), 
                      self, gtk.RESPONSE_OK)
        self.vbox.pack_end(entry, True, True, 0)
        self.vbox.show_all()
        self.entry = entry
    def set_value(self, text):
        self.entry.set_text(text)
    def run(self):
        result = super(EntryDialog, self).run()
        if (result == gtk.RESPONSE_OK or (result == gtk.RESPONSE_YES)):
            text = self.entry.get_text()
        elif (result == gtk.RESPONSE_NO):
            text = gtk.RESPONSE_NO
        else:
            text = None
        return text

# This is a function I wrote.  :)
def getDialogMessage(message, defaultval):
    dlg = EntryDialog(None, 0, gtk.MESSAGE_QUESTION, gtk.BUTTONS_YES_NO,
                            message, default_value=defaultval)
    dlg.show_all()
    rc = dlg.run()
    dlg.destroy()
    return rc

# The following message functions were from 
# License: Creative Commons Attribution-Share Alike 3.0 License
# http://creativecommons.org/licenses/by-sa/3.0/legalcode

def warningMessage(message):
    dlg = gtk.MessageDialog(None, 0, gtk.MESSAGE_WARNING, gtk.BUTTONS_YES_NO,
                            message)
    dlg.show_all()
    rc = dlg.run()
    dlg.destroy()
    if (rc == gtk.RESPONSE_NO):
      return gtk.RESPONSE_NO
    if (rc == gtk.RESPONSE_DELETE_EVENT):
      return gtk.RESPONSE_NO
    if (rc == gtk.RESPONSE_CLOSE):
      return gtk.RESPONSE_NO
    if (rc == gtk.RESPONSE_CANCEL):
      return gtk.RESPONSE_NO
                                                                                
    return rc
                                                                                
def errorMessage( message):
    dlg = gtk.MessageDialog(None, 0, gtk.MESSAGE_ERROR, gtk.BUTTONS_OK,
                            message)
    dlg.show_all()
    rc = dlg.run()
    dlg.destroy()
    return rc
                                                                                
def infoMessage( message):
    dlg = gtk.MessageDialog(None, 0, gtk.MESSAGE_INFO, gtk.BUTTONS_YES_NO,
                            message)
    dlg.show_all()
    rc = dlg.run()
    dlg.destroy()
    return rc
                                                                                
def simpleInfoMessage( message):
    dlg = gtk.MessageDialog(None, 0, gtk.MESSAGE_INFO, gtk.BUTTONS_OK,
                            message)
    dlg.show_all()
    rc = dlg.run()
    dlg.destroy()
    return rc

def loggerSetup():
   logging.basicConfig(
      level=logging.DEBUG,
      format='%(asctime)s:%(levelname)s:%(name)s:%(message)s',
      filename="out.log",
      filemode='a'
   )

   stdout_logger = logging.getLogger('STDOUT')
   sl = StreamToLogger(stdout_logger, logging.INFO)
   sys.stdout = sl
    
   stderr_logger = logging.getLogger('STDERR')
   sl = StreamToLogger(stderr_logger, logging.ERROR)
   sys.stderr = sl

def now():
   return int( time() )

def main():
   loggerSetup()

   pdf_files=""
   files = os.getenv('NEMO_SCRIPT_SELECTED_FILE_PATHS')
   myfiles = files.split()
   
   for file in myfiles:
      base = os.path.basename(file)
      path, ext = os.path.splitext(file)
      dirname = os.path.dirname(file)

      if (ext == '.pdf'):
         pdf_files += (base + " ")

   pdf_files = pdf_files.split()
   number_of_pdf_files = len(pdf_files)

   for pdf_file in pdf_files:
      # The page rotation setting can cause pdftk to rotate pages and
      # documents.  Each option sets the page rotation as follows (in
      # degrees): N: 0, E: 90, S: 180, W: 270, L: -90, R: +90, D:
      # +180. L, R, and D make relative adjustments to a page's rota-
      # tion.
      
      rotate_opt = 'south'  #used to be just 'S' but newer pdftk broke this
      outfile = 'rotate-' + pdf_file
      os.system("pdftk %s cat 1-end%s output %s" %(pdf_file, rotate_opt, outfile))

if __name__ == "__main__":
    main()
